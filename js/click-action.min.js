document.addEventListener('DOMContentLoaded', function() {
    var planets = document.querySelectorAll('.orbit');
    var sun = document.getElementById('sun');
    var turnBackButton = document.getElementById('turn-back');
    var infoPanel = document.createElement('div');
    infoPanel.classList.add('info-panel');
    document.body.appendChild(infoPanel);
  
    var menuItems = document.querySelectorAll('#data a');
    var sunMenuItem = document.getElementById('menu-sun'); // get the sun menu item
  
    /* track current clicked planet */
    var currentClickedElement = null;
  
    /* fetch data from the API */
    async function fetchPlanetDataFromAPI(name) {
      try {
        const response = await fetch(`https://api.le-systeme-solaire.net/rest/bodies/${name.toLowerCase()}`);
        if (response.ok) {
          const data = await response.json();
          console.log(`Fetched data for ${name}:`, data);  // log the data for debugging
          return data;
        } else {
          throw new Error('Network response was not ok.');
        }
      } catch (error) {
        console.error('Fetch error:', error);
        return null;
      }
    }
  
    /* get planet data */
    async function fetchPlanetData(name) {
      const data = await fetchPlanetDataFromAPI(name);
      if (data) {
        return {
          name: data.englishName || "Unknown",
          description: `${data.englishName} is a ${data.bodyType || "N/A"} with a mass of ${data.mass?.massValue || "N/A"} x 10^${data.mass?.massExponent || "N/A"} kg and a radius of ${data.meanRadius || "N/A"} km.`,
          gravity: `Gravity: ${data.gravity || "N/A"} m/sÂ²`,
          escape: `Escape Velocity: ${data.escape || "N/A"} m/s`,
          averageTemp: `Average Temperature: ${data.avgTemp || "N/A"} K`,
          moons: data.moons && data.moons.length ? `Moons: ${data.moons.map(moon => moon.moon).join(', ')}` : `Moons: None`
        };
      } else {
        return { 
          name: name, 
          description: "Information not available.", 
          gravity: "N/A", 
          escape: "N/A", 
          averageTemp: "N/A", 
          moons: "N/A" 
        };
      }
    }
  
    /* display the info panel with the planet data */
    function showInfoPanel(planetData, planetElement) {
      infoPanel.innerHTML = `
        <h2>${planetData.name}</h2>
        <p>${planetData.description}</p>
        <p>${planetData.gravity}</p>
        <p>${planetData.escape}</p>
        <p>${planetData.averageTemp}</p>
        <p>${planetData.moons}</p>
      `;
      infoPanel.style.display = 'block';
  
      var rect = planetElement.getBoundingClientRect();
      var panelWidth = infoPanel.offsetWidth;
      var panelHeight = infoPanel.offsetHeight;
  
      /* position the info panel vertically centered relative to the planet */
      var top = Math.max((rect.top + rect.bottom) / 2 - panelHeight / 2, 10);
  
      /* determine if there's more space to the left or right of the planet */
      var left = (rect.left + rect.right) / 2 < window.innerWidth / 2
        ? Math.min(rect.right + 10, window.innerWidth - panelWidth - 10)
        : Math.max(rect.left - panelWidth - 10, 10);
  
      /* ensure the info panel does not overflow the viewport */
      left = Math.max(left, 10);
      top = Math.min(top, window.innerHeight - panelHeight - 10);
  
      infoPanel.style.left = `${left}px`;
      infoPanel.style.top = `${top}px`;
    }
    
    /* hide the info panel */
    function hideInfoPanel() {
      infoPanel.innerHTML = '';
      infoPanel.style.display = 'none';
    }
  
    async function handleElementClick(element, name) {
      /* reset previously clicked element */
      if (currentClickedElement && currentClickedElement !== element) {
        currentClickedElement.classList.remove('clicked');
        currentClickedElement.style.width = '';
        currentClickedElement.style.height = '';
        currentClickedElement.style.transform = '';
        currentClickedElement.style.transition = '';
        var ring = currentClickedElement.querySelector('.ring');
        if (ring) {
          ring.classList.remove('clicked');
        }
      }
  
      /* hide all planets and the sun, but keep the current one visible */ 
      planets.forEach(function(orbit) {
        orbit.style.display = 'none';
      });
      if (sun !== element) {
        sun.style.display = 'none';
      }
  
      /* show the clicked planet or sun */
      element.style.width = '800px';
      element.style.height = '800px';
      element.style.transformOrigin = 'center center'; 
      element.classList.add('clicked');
  
      var clickedRing = element.querySelector('.ring');
      if (clickedRing) {
        clickedRing.style.transition = 'width 0.5s ease, height 0.5s ease';
        clickedRing.classList.add('clicked');
      }
  
      var orbit = element.closest('.orbit');
      if (orbit) {
        orbit.style.display = 'block';
      }
  
      if (element === sun) {
        sun.style.display = 'block';
      }
  
      /* show the info panel with the fetched data from the API */
      var elementData = await fetchPlanetData(name);
      console.log(`Data for ${name}:`, elementData);  // log the data to debug what is being received
      showInfoPanel(elementData, element);
      turnBackButton.style.display = 'block';
      currentClickedElement = element; // update the currently clicked element
    }
  
    /* handle turn back action */
    function handleTurnBack() {
      planets.forEach(function(orbit) {
        orbit.style.display = 'block';
        var planet = orbit.querySelector('.planet');
        if (planet) {
          planet.style.height = '';
          planet.style.width = '';
          planet.style.transform = '';
          planet.style.transition = '';
          planet.classList.remove('clicked');
        }
        var ring = orbit.querySelector('.ring');
        if (ring) {
          ring.classList.remove('clicked');
        }
      });
  
      sun.style.display = 'block';
      sun.style.width = '';
      sun.style.height = '';
      sun.classList.remove('clicked');
  
      turnBackButton.style.display = 'none';
      hideInfoPanel();
      currentClickedElement = null; // reset the current clicked element
    }
  
    /* add click event listeners to each planet orbit */
    planets.forEach(function(orbit) {
      orbit.addEventListener('click', async function(event) {
        event.stopPropagation();
        var clickedPlanet = orbit.querySelector('.planet');
        var planetName = clickedPlanet.dataset.name;
        await handleElementClick(clickedPlanet, planetName);
      });
    });
  
    /* add click event listeners to each menu item */
    menuItems.forEach(function(menuItem) {
      menuItem.addEventListener('click', async function(event) {
        event.preventDefault();
        var planetName = menuItem.title;
        var planetElement = document.querySelector(`.planet[data-name="${planetName}"]`);
        if (planetElement) {
          await handleElementClick(planetElement, planetName);
        }
      });
    });
  
    /* add event listener to the sun menu item */
    sunMenuItem.addEventListener('click', async function(event) {
      event.preventDefault();
      if (currentClickedElement === sun) {
        handleTurnBack(); // if the sun is already clicked, turn back
      } else {
        await handleElementClick(sun, sun.dataset.name);
      }
    });
  
    /* add click event listeners to the sun */
    sun.addEventListener('click', async function() {
      if (currentClickedElement === sun) {
        handleTurnBack(); // if the sun is already clicked, turn back
      } else {
        await handleElementClick(sun, sun.dataset.name);
      }
    });
  
    /* add click event listeners to turn back button */
    turnBackButton.addEventListener('click', function() {
      handleTurnBack();
    });
  
    /* ensure the turn back button is visible on initial load if needed */
    turnBackButton.style.display = 'none';
  });